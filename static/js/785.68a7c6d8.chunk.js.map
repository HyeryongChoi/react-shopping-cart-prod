{"version":3,"file":"static/js/785.68a7c6d8.chunk.js","mappings":"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","sources":["hooks/useProduct.ts","hooks/useToast.ts","components/common/Toast.tsx","components/product/Product.tsx","components/product/ProductList.tsx","components/product/ProductPageContent.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useErrorBoundary } from 'react-error-boundary';\nimport { useRecoilValue } from 'recoil';\nimport { selectedHostState } from '../recoil/atoms';\nimport { ProductInfo } from '../types';\nimport { PRODUCTS_BASE_URL } from '../constants';\nimport APIHandler from '../api/APIHandler';\n\nexport const useProduct = () => {\n  const { showBoundary } = useErrorBoundary();\n  const host = useRecoilValue(selectedHostState);\n  const PRODUCTS_URL = `${host}${PRODUCTS_BASE_URL}`;\n  const [productList, setProductList] = useState<ProductInfo[]>([]);\n\n  useEffect(() => {\n    const setFetchedProductList = async () => {\n      const newProductList = await getProductList();\n      if (newProductList) setProductList(newProductList);\n    };\n\n    setFetchedProductList();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [host]);\n\n  const getProductList = async () => {\n    try {\n      const responseResult = await APIHandler.get<ProductInfo[]>(PRODUCTS_URL);\n\n      if (responseResult.statusCode !== 200) throw new Error(responseResult.errorMessage);\n\n      return responseResult.result;\n    } catch (error) {\n      showBoundary(error);\n    }\n  };\n\n  return { productList };\n};\n","import { useState } from 'react';\n\nexport const useToast = () => {\n  const [isOpenToast, setIsOpenToast] = useState(false);\n\n  const openToast = () => setIsOpenToast(true);\n  const closeToast = () => setIsOpenToast(false);\n\n  return { isOpenToast, openToast, closeToast };\n};\n","import { styled, css, keyframes } from 'styled-components';\n\ninterface Props {\n  isOpenToast: boolean;\n  closeToast: () => void;\n  message: string;\n}\n\nexport default function Toast({ isOpenToast = false, closeToast, message }: Props) {\n  if (isOpenToast) {\n    setTimeout(() => {\n      closeToast();\n    }, 2000);\n  }\n\n  return <Style.Wrapper isOpenToast={isOpenToast}>{message}</Style.Wrapper>;\n}\n\nconst ShowAndHide = keyframes` \n  0% {\n    opacity: 0;\n  }\n  70%{\n    opacity: 1;\n  }\n  80%{\n    opacity: 1;\n  }\n  100% {\n    opacity: 0;\n  }\n`;\n\nconst Style = {\n  Wrapper: styled.div<{ isOpenToast: boolean }>`\n    justify-content: center;\n    align-items: center;\n\n    width: 300px;\n    height: 50px;\n\n    position: fixed;\n    top: 90%;\n    left: 50%;\n    transform: translateX(-50%);\n    border: none;\n    border-radius: 7px;\n    background-color: var(--toast-box-color);\n\n    font-size: 14px;\n    color: var(--grey-100);\n\n    z-index: 1000;\n\n    ${({ isOpenToast }) => {\n      return isOpenToast\n        ? css`\n            display: flex;\n            animation: ${ShowAndHide} 2s forwards;\n          `\n        : css`\n            display: none;\n          `;\n    }}\n  `,\n};\n","import { styled } from 'styled-components';\nimport { CartIcon } from '../../assets/svg';\nimport { ProductInfo } from '../../types';\nimport { PRODUCT } from '../../constants';\nimport { useCart } from '../../hooks/useCart';\nimport { useToast } from '../../hooks/useToast';\nimport Stepper from '../Stepper';\nimport Toast from '../common/Toast';\nimport Price from '../common/Price';\n\ninterface Props {\n  productInfo: ProductInfo;\n}\n\nexport default function Product({ productInfo }: Props) {\n  const { id, name, price, imageUrl } = productInfo;\n  const { addToCart, getCartItem, updateProductQuantity } = useCart();\n  const { isOpenToast, openToast, closeToast } = useToast();\n  const cartItem = getCartItem(id);\n\n  const handleCartClick = () => {\n    addToCart(id);\n    openToast();\n  };\n\n  return (\n    <Style.Container>\n      <Style.ProductImageWrapper>\n        <Style.ProductImage src={imageUrl} alt={name} loading=\"lazy\" />\n      </Style.ProductImageWrapper>\n      <Style.ProductInfo>\n        <Style.ProductNameAndStepperContainer>\n          <Style.ProductName title={name}>{name}</Style.ProductName>\n          {cartItem ? (\n            <Stepper\n              quantity={cartItem.quantity}\n              maxQuantity={PRODUCT.MAX_COUNT}\n              updateQuantity={(quantity: number) => updateProductQuantity(id, quantity)}\n            />\n          ) : (\n            <Style.CartIconWrapper onClick={handleCartClick} aria-label=\"장바구니 추가\">\n              <CartIcon fill=\"#AAAAAA\" />\n            </Style.CartIconWrapper>\n          )}\n        </Style.ProductNameAndStepperContainer>\n        <Price price={price} size={'large'} label={`${name}`} />\n      </Style.ProductInfo>\n      <Toast\n        isOpenToast={isOpenToast}\n        closeToast={closeToast}\n        message=\"✨ 상품을 장바구니에 담았습니다.\"\n      />\n    </Style.Container>\n  );\n}\n\nconst Style = {\n  Container: styled.div`\n    cursor: pointer;\n  `,\n\n  ProductImageWrapper: styled.div`\n    position: relative;\n    width: 100%;\n    padding-bottom: 100%;\n    overflow: hidden;\n  `,\n\n  ProductImage: styled.img`\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n  `,\n\n  ProductInfo: styled.div`\n    padding: 18px 0 0 0;\n    letter-spacing: 0.5px;\n  `,\n\n  ProductNameAndStepperContainer: styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n\n    margin-bottom: 8px;\n  `,\n\n  ProductName: styled.p`\n    max-width: 120px;\n    overflow: hidden;\n\n    font-size: 16px;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n  `,\n\n  CartIconWrapper: styled.button`\n    padding: 0;\n    margin: 0;\n    border: none;\n    background-color: inherit;\n    height: 30px;\n\n    cursor: pointer;\n  `,\n};\n","import { useEffect } from 'react';\nimport { styled } from 'styled-components';\nimport { useRecoilValue } from 'recoil';\nimport { selectedHostState } from '../../recoil/atoms';\nimport { ProductInfo } from '../../types';\nimport { useCart } from '../../hooks/useCart';\nimport Product from './Product';\n\ninterface Props {\n  products: ProductInfo[];\n}\n\nexport default function ProductList({ products }: Props) {\n  const { initCartList } = useCart();\n  const host = useRecoilValue(selectedHostState);\n\n  useEffect(() => {\n    initCartList();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [host]);\n\n  return (\n    <Style.Container>\n      {products.map((product) => (\n        <li key={product.id}>\n          <Product productInfo={product} />\n        </li>\n      ))}\n    </Style.Container>\n  );\n}\n\nconst Style = {\n  Container: styled.ul`\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    grid-column-gap: 45px;\n    grid-row-gap: 60px;\n\n    /* 태블릿 */\n    @media screen and (max-width: 991px) {\n      grid-template-columns: repeat(3, 1fr);\n    }\n\n    /* 모바일 */\n    @media screen and (max-width: 767px) {\n      grid-template-columns: repeat(1, 1fr);\n    }\n  `,\n};\n","import { useProduct } from '../../hooks/useProduct';\nimport ProductList from './ProductList';\n\nexport default function ProductPageContent() {\n  const { productList } = useProduct();\n\n  return <ProductList products={productList} />;\n}\n"],"names":["useProduct","showBoundary","useErrorBoundary","host","useRecoilValue","selectedHostState","PRODUCTS_URL","concat","PRODUCTS_BASE_URL","_useState","useState","_useState2","_slicedToArray","productList","setProductList","useEffect","setFetchedProductList","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","newProductList","wrap","_context","prev","next","getProductList","sent","stop","apply","arguments","_ref2","_callee2","responseResult","_context2","APIHandler","statusCode","Error","errorMessage","abrupt","result","t0","useToast","isOpenToast","setIsOpenToast","openToast","closeToast","Toast","_ref$isOpenToast","message","setTimeout","_jsx","Style","Wrapper","children","ShowAndHide","keyframes","_templateObject","_taggedTemplateLiteral","styled","_templateObject2","css","_templateObject3","_templateObject4","Product","productInfo","id","name","price","imageUrl","_useCart","useCart","addToCart","getCartItem","updateProductQuantity","_useToast","cartItem","_jsxs","Container","ProductImageWrapper","ProductImage","src","alt","loading","ProductInfo","ProductNameAndStepperContainer","ProductName","title","Stepper","quantity","maxQuantity","PRODUCT","updateQuantity","CartIconWrapper","onClick","CartIcon","fill","Price","size","label","_templateObject5","_templateObject6","_templateObject7","ProductList","products","initCartList","map","product","ProductPageContent"],"sourceRoot":""}